// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type PermissionType string

const (
	PermissionTypeCustom   PermissionType = "custom"
	PermissionTypeStandard PermissionType = "standard"
)

func (e *PermissionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PermissionType(s)
	case string:
		*e = PermissionType(s)
	default:
		return fmt.Errorf("unsupported scan type for PermissionType: %T", src)
	}
	return nil
}

type NullPermissionType struct {
	PermissionType PermissionType
	Valid          bool // Valid is true if PermissionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPermissionType) Scan(value interface{}) error {
	if value == nil {
		ns.PermissionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PermissionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPermissionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PermissionType), nil
}

type ProfileType string

const (
	ProfileTypeCustom   ProfileType = "custom"
	ProfileTypeStandard ProfileType = "standard"
)

func (e *ProfileType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProfileType(s)
	case string:
		*e = ProfileType(s)
	default:
		return fmt.Errorf("unsupported scan type for ProfileType: %T", src)
	}
	return nil
}

type NullProfileType struct {
	ProfileType ProfileType
	Valid       bool // Valid is true if ProfileType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProfileType) Scan(value interface{}) error {
	if value == nil {
		ns.ProfileType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProfileType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProfileType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProfileType), nil
}

type UserStatus string

const (
	UserStatusActive   UserStatus = "active"
	UserStatusInactive UserStatus = "inactive"
)

func (e *UserStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserStatus(s)
	case string:
		*e = UserStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UserStatus: %T", src)
	}
	return nil
}

type NullUserStatus struct {
	UserStatus UserStatus
	Valid      bool // Valid is true if UserStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UserStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserStatus), nil
}

type Feature struct {
	ID          uuid.UUID      `json:"id"`
	Title       string         `json:"title"`
	Slug        string         `json:"slug"`
	ParentID    uuid.NullUUID  `json:"parent_id"`
	Description sql.NullString `json:"description"`
	CreatedBy   uuid.NullUUID  `json:"created_by"`
	UpdatedBy   uuid.NullUUID  `json:"updated_by"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

type Permission struct {
	ID          uuid.UUID          `json:"id"`
	Title       string             `json:"title"`
	Slug        string             `json:"slug"`
	Type        NullPermissionType `json:"type"`
	Description sql.NullString     `json:"description"`
	CreatedBy   uuid.NullUUID      `json:"created_by"`
	UpdatedBy   uuid.NullUUID      `json:"updated_by"`
	CreatedAt   time.Time          `json:"created_at"`
	UpdatedAt   time.Time          `json:"updated_at"`
}

type PermissionFeature struct {
	ID           uuid.UUID     `json:"id"`
	PermissionID uuid.NullUUID `json:"permission_id"`
	FeatureID    uuid.NullUUID `json:"feature_id"`
	CreatedAt    time.Time     `json:"created_at"`
	UpdatedAt    time.Time     `json:"updated_at"`
}

type Profile struct {
	ID          uuid.UUID       `json:"id"`
	Title       string          `json:"title"`
	Slug        string          `json:"slug"`
	Type        NullProfileType `json:"type"`
	Description sql.NullString  `json:"description"`
	CreatedBy   uuid.NullUUID   `json:"created_by"`
	UpdatedBy   uuid.NullUUID   `json:"updated_by"`
	CreatedAt   time.Time       `json:"created_at"`
	UpdatedAt   time.Time       `json:"updated_at"`
}

type ProfilePermission struct {
	ID           uuid.UUID     `json:"id"`
	PermissionID uuid.NullUUID `json:"permission_id"`
	ProfileID    uuid.NullUUID `json:"profile_id"`
	CreatedAt    time.Time     `json:"created_at"`
	UpdatedAt    time.Time     `json:"updated_at"`
}

type User struct {
	ID                 uuid.UUID      `json:"id"`
	ProfileID          uuid.NullUUID  `json:"profile_id"`
	Email              string         `json:"email"`
	HashedPassword     string         `json:"hashed_password"`
	FirstName          sql.NullString `json:"first_name"`
	LastName           sql.NullString `json:"last_name"`
	Phone              sql.NullString `json:"phone"`
	Status             NullUserStatus `json:"status"`
	LastLogin          sql.NullTime   `json:"last_login"`
	PasswordExpiryDate sql.NullTime   `json:"password_expiry_date"`
	PasswordChangedAt  time.Time      `json:"password_changed_at"`
	CreatedBy          uuid.NullUUID  `json:"created_by"`
	UpdatedBy          uuid.NullUUID  `json:"updated_by"`
	CreatedAt          time.Time      `json:"created_at"`
	UpdatedAt          time.Time      `json:"updated_at"`
}
